AWSTemplateFormatVersion: "2010-09-09"
Description: "CloudFormation template for deploying domain-research-agent app using ECS Fargate, CodeBuild, and CodePipeline"

Parameters:
  S3BucketName:
    Type: String
    Description: "The S3 bucket where domain summaries will be stored."
  OpenAIApiKey:
    Type: String
    NoEcho: true
    Description: "OpenAI API Key for the application"
  GitHubOwner:
    Type: String
    Description: "GitHub owner (username or organization)"
  GitHubRepoName:
    Type: String
    Description: "GitHub repository"
  GitHubBranch:
    Type: String
    Description: "GitHub branch"
  GitHubOAuthToken:
    Type: String
    NoEcho: true
    Description: "GitHub OAuth token for CodePipeline"
  VPCId:
    Type: AWS::EC2::VPC::Id
    Description: "VPC ID"
  Subnets:
    Type: List<AWS::EC2::Subnet::Id>
    Description: "List of subnets for ECS tasks"
  SecurityGroupId:
    Type: AWS::EC2::SecurityGroup::Id
    Description: "Security Group ID"

Resources:
  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/ecs/${AWS::StackName}"
      RetentionInDays: 30

  ECRRepository:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: !Sub "${AWS::StackName}-repo"

  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Sub "${AWS::StackName}-Cluster"

  ECSTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: [ecs-tasks.amazonaws.com]
            Action: [sts:AssumeRole]
      Policies:
        - PolicyName: "ECSTaskExecutionPolicy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - ecr:GetAuthorizationToken
                  - ecr:BatchCheckLayerAvailability
                  - ecr:GetDownloadUrlForLayer
                  - ecr:BatchGetImage
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - ecs:DescribeTasks
                  - ecs:DescribeTaskDefinition
                  - ssm:GetParameters
                Resource: "*"

  ECSTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Sub "${AWS::StackName}-task"
      ExecutionRoleArn: !GetAtt ECSTaskExecutionRole.Arn
      Cpu: "512"
      Memory: "1024"
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      ContainerDefinitions:
        - Name: my-container
          Image: !Sub "${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${ECRRepository}:latest"
          Memory: 512
          Cpu: 256
          Essential: true
          Environment:
            - Name: ENVIRONMENT
              Value: "production"
            - Name: LOG_LEVEL
              Value: "INFO"
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref LogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: ecs
          Environment:
            - Name: OPENAI_API_KEY
              Value: !Ref OpenAIApiKey
            - Name: S3_BUCKET
              Value: !Ref S3BucketName

  ECSService:
    Type: AWS::ECS::Service
    Properties:
      Cluster: !Ref ECSCluster
      LaunchType: FARGATE
      TaskDefinition: !Ref ECSTaskDefinition
      DesiredCount: 2
      NetworkConfiguration:
        AwsvpcConfiguration:
          Subnets: !Ref Subnets
          SecurityGroups:
            - !Ref SecurityGroupId
          AssignPublicIp: ENABLED

  CodeBuildRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: [codebuild.amazonaws.com]
            Action: [sts:AssumeRole]
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/PowerUserAccess

  CodePipelineRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: 
                - codepipeline.amazonaws.com
            Action: 
              - sts:AssumeRole
      Policies:
        - PolicyName: "CodePipelineCustomPolicy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                  - s3:ListBucket
                  - s3:GetBucketVersioning
                Resource: 
                  - !Sub "arn:aws:s3:::codepipeline-${AWS::Region}-${AWS::AccountId}"
                  - !Sub "arn:aws:s3:::codepipeline-${AWS::Region}-${AWS::AccountId}/*"
              - Effect: Allow
                Action:
                  - codebuild:StartBuild
                  - codebuild:BatchGetBuilds
                Resource: !Sub "arn:aws:codebuild:${AWS::Region}:${AWS::AccountId}:project/${CodeBuild}"
              - Effect: Allow
                Action:
                  - iam:PassRole
                Resource: !GetAtt CodeBuildRole.Arn

  CodeBuild:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: !Sub "${AWS::StackName}-Build"
      ServiceRole: !GetAtt CodeBuildRole.Arn
      Artifacts:
        Type: CODEPIPELINE
      Environment:
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/standard:5.0
        Type: LINUX_CONTAINER
        PrivilegedMode: true
        EnvironmentVariables:
          - Name: ECR_REPOSITORY_URI
            Value: !Sub "${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${ECRRepository}"
      Source:
        Type: CODEPIPELINE
        BuildSpec: |
          version: 0.2
          phases:
            pre_build:
              commands:
                - aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $ECR_REPOSITORY_URI
            build:
              commands:
                - docker build -t $ECR_REPOSITORY_URI:latest .
            post_build:
              commands:
                - docker push $ECR_REPOSITORY_URI:latest
                - echo "Updating ECS Service..."
                

  CodePipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      RoleArn: !GetAtt CodePipelineRole.Arn
      ArtifactStore:
        Type: S3
        Location: !Sub "codepipeline-${AWS::Region}-${AWS::AccountId}"
      Stages:
        - Name: Source
          Actions:
            - Name: SourceAction
              ActionTypeId:
                Category: Source
                Owner: ThirdParty
                Provider: GitHub
                Version: "1"
              Configuration:
                Owner: !Ref GitHubOwner
                Repo: !Ref GitHubRepoName
                Branch: !Ref GitHubBranch
                OAuthToken: !Ref GitHubOAuthToken
              OutputArtifacts:
                - Name: SourceArtifact

        - Name: Build
          Actions:
            - Name: BuildAction
              ActionTypeId:
                Category: Build
                Owner: AWS
                Provider: CodeBuild
                Version: "1"
              Configuration:
                ProjectName: !Ref CodeBuild
              InputArtifacts:
                - Name: SourceArtifact
              OutputArtifacts:
                - Name: BuildArtifact

Outputs:
  ECSCluster:
    Description: "ECS Cluster Name"
    Value: !Ref ECSCluster
  ECRRepository:
    Description: "ECR Repository URL"
    Value: !Sub "${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${ECRRepository}"
  ECSService:
    Description: "ECS Service Name"
    Value: !Ref ECSService
  CodePipeline:
    Description: "CodePipeline Name"
    Value: !Ref CodePipeline
